# Auto detect text files and perform LF normalization
* text=auto
int circlesX[];
int circlesY[];
int circleX[];
int circleY[];
int numCircles=50;
int xspacing=3;
int w;
import processing.sound.*;
SoundFile file;
String audioName = "OBE.mp3";
String path;
float theta= 0.0;
float amplitude= 25;
float period = 700;
float dx;
float[] yvalues;

void setup()
{
  fullScreen();
  background(#CBD9FF);
  noStroke();
  circlesX = new int[numCircles];
  circlesY = new int[numCircles];
  file = new SoundFile(this, "OBE.mp3");
  file.play(); 

 circleX = new int[numCircles];
  circleY = new int[numCircles];
  
  for (int i=0; i< numCircles; i++)
  { 
    circlesX[i]= (75*i);
    circlesY[i]= 690;
  }
    for (int i=0; i< numCircles; i++)
  { 
    circleX[i]= (75*i);
    circleY[i]= 515;
  }
    fill(#FF7308);
  ellipse(1125, 250, 100, 100);
  
  w= width;
  dx= (3/period) * xspacing;
  yvalues = new float[w/xspacing];
  
}

void draw()
{

  fill(#323790);
  rect(0, 675, width, 430);

    
  fill(#6090F5);
 rect(0, 500, width, 200);
   for (int i=0; i< numCircles; i++)
  {
    int directionX= 515;
    ellipse(circleX[i], circleY[i], 100, 90);
  }
    fill(#323790);
    for (int i=0; i< numCircles; i++)
  {
    int directionX= 680;
    ellipse(circlesX[i], circlesY[i], 100, 90);
  }
  
  
 calcWave();
  renderWave();
}

void calcWave() {
  // Increment theta (try different values for 'angular velocity' here
  theta += 0.02;

  // For every x value, calculate a y value with sine function
  float x = theta;
  for (int i = 0; i < yvalues.length; i++) {
    yvalues[i] = sin(x)*amplitude;
    x+=dx;
  }
}

void renderWave() {
  noStroke();
  fill(255);

 for (int x = 0; x < yvalues.length; x++) {
    ellipse(x*xspacing, height/2+yvalues[x], 16, 16);
  }

}
